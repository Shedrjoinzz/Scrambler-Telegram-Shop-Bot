import aiogram
from aiogram import types
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher.storage import FSMContext

import asyncio

from states.state import PushAdminMessage, EditAdminBalance, EditAdminProcent
from data.db import DB
from libs.config import id_admin
from keyboards import inline_keyboards as ikb
from loader import dp, bot
from handlers import commands as com

# EN Here shows the Admins section, the list of admins and management
# RU –ó–¥–µ—Å—å –ø–æ–∫–∞–∑–∞–Ω —Ä–∞–∑–¥–µ–ª "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã", —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –∏ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–∞

@dp.callback_query_handler(text='management_admins_admin_')
async def call_management_admins_admin(call: types.CallbackQuery):
    list_admins = id_admin()

    if list_admins[0] == call.message.chat.id:
        with DB() as db:
            get_list_admins =  db.give_all_admin_list()

        msg_is_list_admins = 'üìã <b>–°–ø–∏—Å–æ–∫ –ê–¥–º–∏–Ω–æ–≤ –ú–∞–≥–∞–∑–∏–Ω –ë–æ—Ç–∞</b>'
        if [] == get_list_admins:
            msg_is_list_admins += '\n-<i>–°–ø–∏—Å–æ–∫ –ê–¥–º–∏–Ω–æ–≤ –ø—É—Å—Ç</i>'
            
        await call.message.edit_text(msg_is_list_admins, reply_markup=ikb.give_list_admins(get_list_admins))

    else:
        _id = await call.message.answer('üìõ <b>–£ –≤–∞—Å –Ω–µ—Ç —É–ø–æ–ª–Ω–æ–º–æ—á–∏–π —É—Ä–ø–∞–≤–ª—è—Ç—å –¥—Ä—É–≥–∏–º–∏ –ê–¥–º–∏–Ω–∞–º–∏</b>')
        await asyncio.sleep(2)
        try:
            await bot.delete_message(call.message.chat.id, message_id=_id.message_id)
        except aiogram.utils.exceptions.MessageToDeleteNotFound:
            pass

@dp.callback_query_handler(Text(startswith='give_admin_id_'))
async def call_give_admin_id(call: types.CallbackQuery):
    call_msg = call.data.split('_')

    with DB() as db:
        get_info = db.give_info_user('name, lastname, balance_rub, procent, all_money_deposit', call_msg[3])
        get_karma_admin = db.give_karma_admin(int(call_msg[3]))

    await call.message.edit_text(f'üÜî <b>–ê–¥–º–∏–Ω:</b> <code>{call_msg[3]}</code>\n'
                                 f'ü™™ <b>FullName: {get_info[0]} {get_info[1]}</b>\n'
                                 f'üí≥ <b>–ë–∞–ª–∞–Ω—Å: {get_info[2]} RUB</b>\n'
                                 f'üí∏ <b>–í—Å–µ–≥–æ –î–µ–ø–æ–∑–∏—Ç: {get_info[4]}</b>\n'
                                 f'üîÆ <b>–ö–∞—Ä–º–∞: {get_karma_admin[0]}</b>\n'
                                 f'‚öñÔ∏è <b>–ü—Ä–æ—Ü–µ–Ω—Ç –æ—Ç –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π: {get_info[3]}</b>', reply_markup=ikb.edit_admins(call_msg[3]))


@dp.callback_query_handler(Text(startswith='del_admin_id_'))
async def call_del_admin_id(call: types.CallbackQuery):
    call_msg = call.data.split('_')
    with DB() as db:
        db.delete_admins(call_msg[3])

    await call.message.edit_text(f'üí¢ <b>–ê–¥–º–∏–Ω:</b> <code>{call_msg[3]}</code> –±—ã–ª —É–¥–∞–ª—ë–Ω –∏–∑ —Å–ø–∏—Å–∫–∞ –ê–¥–º–∏–Ω–æ–≤', reply_markup=ikb.back_in_edit_admins())


@dp.callback_query_handler(Text(startswith='push_msg_admin_id_'))
async def call_push_msg_admin_id(call: types.CallbackQuery, state: FSMContext):
    call_msg = call.data.split('_')
    await state.set_state(PushAdminMessage.admin_push_message)

    async with state.proxy() as data:
        data['id_admin'] = call_msg[4]

    await call.message.edit_text(f'üìù <b>–ü—Ä–∏—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ê–¥–º–∏–Ω–∞ {call_msg[4]} –º–∞–∫—Å–∏–º—É–º 800 —Å–∏–º–≤–æ–ª–æ–≤:</b>',
                                 reply_markup=ikb.cancel_in_edit_admins('PushAdminMessage'))


@dp.message_handler(state=PushAdminMessage.admin_push_message)
async def admin_push_msg(message: types.Message, state: FSMContext):

    if len(message.text) > 800:
        await message.answer(f'‚õîÔ∏è <b>–ú–∞–∫—Å–∏–º—É–º 800 —Å–∏–º–≤–æ–ª–æ–≤ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏:</b>\n–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç {len(message.text)} —Å–∏–º–≤–æ–ª–æ–≤',
                             reply_markup=ikb.cancel_in_edit_admins('PushAdminMessage'))
        return
    
    async with state.proxy() as data:
        _id_admin = data['id_admin']

    try:
        await bot.send_message(_id_admin, message.text)
        await message.answer(f'‚úÖ <b>–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ê–¥–º–∏–Ω—É {_id_admin}</b>')
    except:
        await message.answer(f'‚ö†Ô∏è <b>–û—â–∏–±–∫–∞\n–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ê–¥–º–∏–Ω—É {_id_admin}\n–í–æ–∑–º–æ–∂–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞</b>')
    
    await state.finish()


@dp.callback_query_handler(Text(startswith='edit_balance_admin_id_'))
async def call_push_msg_admin_id(call: types.CallbackQuery, state: FSMContext):
    call_msg = call.data.split('_')

    async with state.proxy() as data:
        data['id_admin'] = call_msg[4]
    
    await state.set_state(EditAdminBalance.admin_balance_rub)
    await call.message.edit_text('‚úèÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ –±–∞–ª–∞–Ω—Å –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å\n\n<b>–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —á–∏—Å–ª–æ —Å –ø–ª—é—Å–æ–º +100 –∏–ª–∏ –º–∏–Ω—É—Å–æ–º -100</b>',
                                 reply_markup=ikb.cancel_in_edit_admins('EditAdminBalance'))


@dp.message_handler(state=EditAdminBalance.admin_balance_rub)
async def edit_admin_balance_rub(message: types.Message, state: FSMContext):
    
    try:
        _int_summ_balance_admin = int(message.text)
    except ValueError:
        await message.answer('‚õîÔ∏è <b>–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!</b>', reply_markup=ikb.cancel_in_edit_admins('EditAdminBalance'))
        return
    
    async with state.proxy() as data:
        _id_admin = data['id_admin']


    with DB() as db:
        if '+' in message.text:
            db.give_top_up_balance_rub(_id_admin, _int_summ_balance_admin)
            try:
                await bot.send_message(_id_admin, f'‚ÑπÔ∏è –í–∞—à –±–∞–ª–∞–Ω—Å –±—ã–ª –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ <b>{message.text} RUB</b>')
            except:
                pass            
            await message.answer(f'‚úÖ –ë–∞–ª–∞–Ω—Å –ê–¥–º–∏–Ω–∞ <code>{_id_admin}</code> –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ <b>{message.text} RUB</b>',
                                 reply_markup=ikb.back_in_edit_admins())
            await state.finish()
            return
        
        if '-' in message.text:
            db.give_top_up_balance_rub(_id_admin, _int_summ_balance_admin)
            try:
                await bot.send_message(_id_admin, f'‚ÑπÔ∏è –í–∞—à –±–∞–ª–∞–Ω—Å –±—ã–ª –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ <b>{message.text} RUB</b>')
            except:
                pass
            await message.answer(f'‚úÖ –ë–∞–ª–∞–Ω—Å –ê–¥–º–∏–Ω–∞ <code>{_id_admin}</code> –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ <b>{message.text} RUB</b>',
                                 reply_markup=ikb.back_in_edit_admins())
            await state.finish()
            return

        
        db.update_multi_balance_user(_int_summ_balance_admin, _id_admin)
        try:
            await bot.send_message(_id_admin, f'üí¨ –í–∞—à –±–∞–ª–∞–Ω—Å –±—ã–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω <b>{message.text} RUB</b>')
        except:
            await message.answer('‚ö†Ô∏è <i>–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –æ–ø–æ–≤–µ—Å—Ç–∏—Ç—å –ê–¥–º–∏–Ω–∞ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –µ–≥–æ –±–∞–ª–∞–Ω—Å–∞</i>')

        await message.answer(f'‚úÖ –ë–∞–ª–∞–Ω—Å –ê–¥–º–∏–Ω–∞ <code>{_id_admin}</code> —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω <b>{message.text} RUB</b>',
                             reply_markup=ikb.back_in_edit_admins())
        await state.finish()


@dp.callback_query_handler(Text(startswith='edit_procent_admin_id_'))
async def call_push_msg_admin_id(call: types.CallbackQuery, state: FSMContext):
    call_msg = call.data.split('_')
    
    await state.set_state(EditAdminProcent.admin_procent)

    async with state.proxy() as data:
        data['id_admin'] = call_msg[4]

    await call.message.edit_text('‚úèÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞ –æ—Ç 0 –¥–æ 100 –±–µ–∑ "%"\n\n'
                                 '‚ÑπÔ∏è <b>–≠—Ç–æ –ø—Ä–æ—Ü–µ–Ω—Ç –∫–æ—Ç–æ—Ä—ã–π –Ω–∞—á–∏—Å–ª–∏—Ç—Å—è –ê–¥–º–∏–Ω—É –Ω–∞ –µ–≥–æ –±–∞–ª–∞–Ω—Å –æ—Ç –µ–≥–æ —Å—É–º–º—ã –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è</b>',
                                 reply_markup=ikb.cancel_in_edit_admins('EditAdminProcent'))


@dp.message_handler(state=EditAdminProcent.admin_procent)
async def call_add_procent_user(message: types.Message, state: FSMContext):
    await com.delete_all_message_chat(message)
    try:
        _procent_user = int(message.text)
    except ValueError:
        await message.answer('üìù <b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø—Ä–æ—Ü–µ–Ω—Ç –æ—Ç 0 –¥–æ 100:</b>',
                             reply_markup=ikb.cancel_in_edit_admins('EditAdminProcent'))
        return
    
    if _procent_user > 100:
        await message.answer('‚õîÔ∏è <b>–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç 100</b>',
                             reply_markup=ikb.cancel_in_edit_admins('EditAdminProcent'))
        return
    
    if _procent_user < 0:
        await message.answer('‚õîÔ∏è <b>–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç 0</b>',
                             reply_markup=ikb.cancel_in_edit_admins('EditAdminProcent'))
        return
    
    async with state.proxy() as data:
        _id_admin = data['id_admin']

    with DB() as db:
        db.update_procent_users(_procent_user, _id_admin)

    await message.answer(f'‚úÖ <b>–ü—Ä–æ—Ü–µ–Ω—Ç –ê–¥–º–∏–Ω–∞ {_id_admin} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω {_procent_user}%</b>',
                         reply_markup=ikb.back_in_edit_admins())
    await state.finish()