from aiogram import types
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher import FSMContext

from keyboards import inline_keyboards as ikb
from keyboards import admin_keyboards as aikb
from states.state import EditProductOne
from data.db import DB
from loader import dp
from handlers import commands as com


@dp.callback_query_handler(Text(startswith='edit_old_product_'))
async def call_edit_old_product(call: types.CallbackQuery):
    with DB() as db:
        req = db.give_all_catalogs()

    if [] == req:
        await call.message.edit_text('–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –≤ –∫–∞—Ç–∞–ª–æ–≥ –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞—Ç—å –∫–∞—Ç–∞–ª–æ–≥', reply_markup=ikb.multi_control_category(req, db, 'edit', 'product'))
        return

    await call.message.edit_text('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–∞–ª–æ–≥ –≤ –∫–æ—Ç–æ—Ä–æ–º —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Ç–æ–≤–∞—Ä', reply_markup=ikb.multi_control_category(req, db, 'edit', 'product'))


@dp.callback_query_handler(Text(startswith='edit_product_'))
async def call_edit_product(call: types.CallbackQuery):
    call_msg = call.data.split('_')
    
    with DB() as db:
        req = db.give_all_product_in_catalogs(call_msg[2])

    await call.message.edit_text('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å', reply_markup=ikb.give_product_in_catalog('edits_', call_msg[2], req))

@dp.callback_query_handler(Text(startswith='edits_product_'))
async def call_edits_product(call: types.CallbackQuery):
    call_msg = call.data.split('_')

    with DB() as db:
        req = db.give_info_product(call_msg[2])

    for i in req:
        await call.message.edit_text(f'<b>1) –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:</b> <code>{i[2]}</code>\n\n'
                                     f'<b>2) –û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:</b> <code>{i[3]}</code>\n\n'
                                     f'<b>3) –°—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞:</b> <code>{i[4]}</code> <b>RUB</b>\n\n'
                                     f'<b>4) –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞:</b> <code>{i[5]}</code>\n\n'
                                     f'<b>5) –°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–æ–≤–∞—Ä:</b> <code>{i[6]}</code>\n\n'
                                     '–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å üëá', reply_markup=ikb.select_edit_element_in_product(i[0]))

@dp.callback_query_handler(Text(startswith='one_old_edit_product_'))
async def call_manager_bot_edit(call: types.CallbackQuery, state: FSMContext):
    call_msg = int(call.data.split('_')[4])
    call_msg_id_product = int(call.data.split('_')[5])

    await state.set_state(EditProductOne.id_product)

    async with state.proxy() as data:
        data['id_product'] = call_msg_id_product
        data['id_call_msg'] = call_msg
    
    if call_msg == 1:
        await call.message.edit_text('<b>–ü—Ä–∏—à–ª–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –Ω–µ –±–æ–ª–µ–µ 64 —Å–∏–º–≤–æ–ª–æ–≤:</b>', reply_markup=ikb.cancel_edit_one_product())
    
    if call_msg == 2:
        await call.message.edit_text('<b>–ü—Ä–∏—à–ª–∏—Ç–µ –Ω–æ–≤–æ–µ –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –Ω–µ –±–æ–ª–µ–µ 600 —Å–∏–º–≤–æ–ª–æ–≤:</b>', reply_markup=ikb.cancel_edit_one_product())

    if call_msg == 3:
        await call.message.edit_text('<b>–ü—Ä–∏—à–ª–∏—Ç–µ –Ω–æ–≤—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞:</b>', reply_markup=ikb.cancel_edit_one_product())

    if call_msg == 4:
        await call.message.edit_text('<b>–ü—Ä–∏—à–ª–∏—Ç–µ –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞:</b>', reply_markup=ikb.cancel_edit_one_product())
        
    if call_msg == 5:
        await call.message.edit_text('<b>–ü—Ä–∏—à–ª–∏—Ç–µ –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–æ–≤–∞—Ä –∫–æ—Ç–æ—Ä—ã–π –≤—ã–¥–∞–¥—É—Ç –ø–æ—Å–ª–µ –µ–≥–æ –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏—è:</b>', reply_markup=ikb.cancel_edit_one_product())
    
        
@dp.message_handler(state=EditProductOne.id_product)
async def set_characteristic(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        get_id_product = data['id_product']
        get_id_call_msg = data['id_call_msg']

    with DB() as db:
        
        if get_id_call_msg == 1:

            if len(message.text) > 64:
                await message.answer(f'–ú–∞–∫—Å–∏–º—É–º 64 —Å–∏–º–≤–æ–ª–æ–≤ –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞, –≤ –≤–∞—à–µ–º {len(message.text)} —Å–∏–º–≤–æ–ª–æ–≤:', reply_markup=ikb.cancel_edit_one_product())
                return

            db.update_products('str', 'name_product', message.text, get_id_product)
            await message.answer(f'<b>–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞:</b> <code>{message.text}</code>', reply_markup=aikb.main_admin_panel())

        if get_id_call_msg == 2:

            if len(message.text) > 600:
                await message.answer(f'–ú–∞–∫—Å–∏–º—É–º 600 —Å–∏–º–≤–æ–ª–æ–≤ –≤ –æ–ø–∏—Å–∞–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞, –≤ –≤–∞—à–µ–º {len(message.text)} —Å–∏–º–≤–æ–ª–æ–≤:', reply_markup=ikb.cancel_edit_one_product())
                return
            
            db.update_products('str', 'description_product', message.text, get_id_product)
            await message.answer(f'<b>–û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞:</b> <code>{message.text}</code>', reply_markup=aikb.main_admin_panel())
            
        if get_id_call_msg == 3:

            try:
                int_new_price = int(message.text)

                if int_new_price > 1_000_000:
                    await message.answer('<b>–°–ª–∏—à–∫–æ–º –¥–æ—Ä–æ–≥–æ–π —Ç–æ–≤–∞—Ä, –º–∞–∫—Å–∏–º—É–º 1 000 000 RUB</b>', reply_markup=ikb.cancel_edit_one_product())
                    return
                
                db.update_products('int', 'price', message.text, get_id_product)
                await message.answer(f'<b>–°—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞:</b> <code>{message.text} RUB</code>', reply_markup=aikb.main_admin_panel())
                
            except ValueError:
                await message.answer('<b>–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!</b>', reply_markup=ikb.cancel_edit_one_product())
                return

        
        if get_id_call_msg == 4:
            try:
                int_new_count = int(message.text)

                if int_new_count > 10_000:
                    await message.answer('<b>–°–ª–∏—à–∫–æ–º –æ–≥—Ä–æ–º–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞, –º–∞–∫—Å–∏–º—É–º 10 000</b>', reply_markup=ikb.cancel_edit_one_product())
                    return
                
                db.update_products('int', 'count_products', message.text, get_id_product)
                await message.answer(f'<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞:</b> <code>{message.text}</code>', reply_markup=aikb.main_admin_panel())

            except ValueError:
                await message.answer('<b>–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!</b>', reply_markup=ikb.cancel_edit_one_product())
                return

        if get_id_call_msg == 5:
            if len(message.text) > 600:
                await message.answer('<b>–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è —Å—Å—ã–ª–∫–∞</b>', reply_markup=ikb.cancel_edit_one_product())
                return
            
            if not 'https://' in message.text:
                await message.reply('<b>–ù–µ –≤–∏–¥–Ω–æ —Å—Å—ã–ª–∫–∏ –Ω–∞ —Ç–æ–≤–∞—Ä "https://"</b>', reply_markup=ikb.cancel_edit_one_product())
                return
            
            db.update_products('str', 'link_products', message.text, get_id_product)
            await message.answer(f'<b>–°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞:</b> <code>{message.text}</code>', reply_markup=aikb.main_admin_panel())
        
        await state.finish()
        await com.delete_all_message_chat(message)
