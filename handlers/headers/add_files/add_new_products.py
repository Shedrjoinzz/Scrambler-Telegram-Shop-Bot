from aiogram import types
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher import FSMContext

from keyboards import inline_keyboards as ikb
from keyboards import admin_keyboards as aikb
from states.state import AddProducts, AdvancedAddProducts
from data.db import DB
from loader import dp, bot
from handlers import commands as com


@dp.callback_query_handler(Text(startswith='add_products_'))
async def call_add_products(call: types.CallbackQuery):
    await call.message.edit_text('–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ç–æ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞', reply_markup=ikb.select_add_product())


@dp.callback_query_handler(Text(startswith='select_add_product_'))
async def call_select_add_product(call: types.CallbackQuery, state: FSMContext):
    call_msg = call.data.split('_')
    with DB() as db:
        req = db.give_all_catalogs()

    if [] != req:
        if call_msg[3] == 'usual':
            await state.set_state(AddProducts.id_catalog)
        
        if call_msg[3] == 'advanced':
            await state.set_state(AdvancedAddProducts.id_catalog)
            
        await call.message.edit_text('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–∞–ª–æ–≥ –≤ –∫–æ—Ç–æ—Ä–æ–º —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä', reply_markup=ikb.multi_control_category(req, db, 'add', 'product'))

    else:
        await call.message.edit_text('–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –≤ –∫–∞—Ç–∞–ª–æ–≥ –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞—Ç—å –∫–∞—Ç–∞–ª–æ–≥', reply_markup=ikb.multi_control_category(req, db, 'add', 'product'))

# //////////////////////////////[Usual]/////////////////////////

@dp.callback_query_handler(Text(startswith='add_product_'), state=AddProducts.id_catalog)
async def call_add_product(call: types.CallbackQuery, state: FSMContext):
    call_msg = call.data.split('_')

    async with state.proxy() as data:
        data['id_catalog'] = call_msg[2]

    await state.set_state(AddProducts.product)
    await call.message.edit_text(f'–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–∞—Ç–∞–ª–æ–≥ <b>{call_msg[2]}</b>\n'
                                '–ü—Ä–∏—à–ª–∏—Ç–µ —á–µ—Ä–µ–∑ —Ç–µ–≥–∏ <b>#tor#</b>: –ò–º—è —Ç–æ–≤–∞—Ä–∞#tor#–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ#tor#–°—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞#tor#–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞#tor#–°—Å—ã–ª–∫—É –Ω–∞ —Ç–æ–≤–∞—Ä\n\n'
                                '<b>–ü—Ä–∏–º–µ—Ä:</b> <code>–ë—Ä–∞–≤–ª—Å—Ç–∞—Ä—Å#tor#–°–ª–∏–≤–∞—é –ø–æ –¥–µ—à–µ–≤–∫–µüî•–∂–∏—Ä–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç –º–Ω–æ–≥–æ –¥–æ—Ä–æ–≥–∏—Ö —Å–∫–∏–Ω–æ–≤üíØ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫—É–ø–ª–µ–Ω–Ω—ã—Ö –ë–ü#tor#696#tor#2#tor#https://360.yandex.ru/disk/</code>', reply_markup=ikb.cance_add_new_product())


@dp.message_handler(state=AddProducts.product)
async def call_add_end(message: types.Message, state: FSMContext):
    _msg = message.text.split('#tor#')

    if len(_msg) == 5:
        if int(_msg[3]) > 1000000:
            await message.reply('–°–ª–∏—à–∫–æ–º –±–æ–ª—å—â–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞\n'
                                '–ú–∞–∫—Å–∏–º—É–º 1000000\n'
                                '<b>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:</b>')
            return

        try:
            int(_msg[2])
            int(_msg[3])
        except ValueError:
            await message.reply('–¶–µ–Ω–∞ –∏–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–æ–≤—ã–º–∏\n\n<b>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:</b>', reply_markup=ikb.cance_add_new_product())
            return
        
        if len(_msg[1]) > 151:
            await message.reply('–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤ 150 –≤ –û–ü–ò–°–ê–ù–ò–ò\n\n<b>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:</b>', reply_markup=ikb.cance_add_new_product())

        elif not 'https://' in _msg[4]:
            await message.reply('–ù–µ –≤–∏–¥–Ω–æ —Å—Å—ã–ª–∫–∏ –Ω–∞ —Ç–æ–≤–∞—Ä "https://"')

        elif len(_msg[0]) > 32:
            await message.reply('–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤ 32 –≤ –ù–∞–∑–≤–∞–Ω–∏–∏ –¢–æ–≤–∞—Ä–∞\n\n<b>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:</b>', reply_markup=ikb.cance_add_new_product())

        else:
            async with state.proxy() as data:
                with DB() as db:
                    db.add_product_in_catalogs(data['id_catalog'], _msg[0], _msg[1], float(_msg[2]), float(_msg[3]), _msg[4])
                    
            await com.delete_all_message_chat(message)
            await state.finish()
            await message.answer('–¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–∞—Ç–∞–ª–æ–≥ –∏ —É–∂–µ –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º!', reply_markup=aikb.main_admin_panel())

    else:
        await message.reply('–ß—Ç–æ —Ç–æ –Ω–µ —Ç–∞–∫, –ø–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–µ–≥–∏ #tor#, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∫–∞–∫ –≤ –ø—Ä–∏–º–µ—Ä–µ\n\n<b>–ò–º—è —Ç–æ–≤–∞—Ä–∞#tor#–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ#tor#–°—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞#tor#–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞#tor#–°—Å—ã–ª–∫—É –Ω–∞ —Ç–æ–≤–∞—Ä\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:</b>', reply_markup=ikb.cance_add_new_product())

# //////////////////////////////[Advanced]/////////////////////////

@dp.callback_query_handler(Text(startswith='add_product_'), state=AdvancedAddProducts.id_catalog)
async def call_add_product_advanced(call: types.CallbackQuery, state: FSMContext):
    call_msg = call.data.split('_')
    
    async with state.proxy() as data:
        data['id_catalog'] = call_msg[2]

    await state.set_state(AdvancedAddProducts.name_product)

    await call.message.edit_text('<b>–ü—Ä–∏—à–ª–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –Ω–µ –±–æ–ª–µ–µ 64 —Å–∏–º–≤–æ–ª–æ–≤</b>', reply_markup=ikb.select_add_or_cancel_product())


@dp.message_handler(state=AdvancedAddProducts.name_product)
async def call_add_name_product(message: types.Message, state: FSMContext):

    if len(message.text) > 64:
        await message.answer(f'–ú–∞–∫—Å–∏–º—É–º 64 —Å–∏–º–≤–æ–ª–æ–≤ –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞, –≤ –≤–∞—à–µ–º {len(message.text)} —Å–∏–º–≤–æ–ª–æ–≤:')
        return
    
    async with state.proxy() as data:
        data['name_product'] = message.text

    await state.set_state(AdvancedAddProducts.description_product)
    await message.answer('<b>–ü—Ä–∏—à–ª–∏—Ç–µ –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –Ω–µ –±–æ–ª–µ–µ 600 —Å–∏–º–≤–æ–ª–æ–≤</b>', reply_markup=ikb.select_add_or_cancel_product())
    await com.delete_all_message_chat(message)

@dp.message_handler(state=AdvancedAddProducts.description_product)
async def call_add_name_product(message: types.Message, state: FSMContext):

    if len(message.text) > 600:
        await message.answer(f'–ú–∞–∫—Å–∏–º—É–º 600 —Å–∏–º–≤–æ–ª–æ–≤ –≤ –æ–ø–∏—Å–∞–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞, –≤ –≤–∞—à–µ–º {len(message.text)} —Å–∏–º–≤–æ–ª–æ–≤:')
        return
    
    async with state.proxy() as data:
        data['description_product'] = message.text

    await state.set_state(AdvancedAddProducts.price_product)
    await message.answer('<b>–ü—Ä–∏—à–ª–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞</b>', reply_markup=ikb.select_add_or_cancel_product())
    await com.delete_all_message_chat(message)

@dp.message_handler(state=AdvancedAddProducts.price_product)
async def call_add_name_product(message: types.Message, state: FSMContext):

    try:
        price_int = int(message.text)

        if price_int >= 1_000_000:
            await message.answer('<b>–°–ª–∏—à–∫–æ–º –¥–æ—Ä–æ–≥–æ–π —Ç–æ–≤–∞—Ä, –º–∞–∫—Å–∏–º—É–º 1 000 000 RUB</b>')
            return
        
        async with state.proxy() as data:
            data['price_product'] = price_int

        await state.set_state(AdvancedAddProducts.count_product)

        await message.answer('<b>–ü—Ä–∏—à–ª–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞</b>', reply_markup=ikb.select_add_or_cancel_product())

    except ValueError:
        await message.answer('<b>–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!</b>')
        return
    
    await com.delete_all_message_chat(message)

@dp.message_handler(state=AdvancedAddProducts.count_product)
async def call_add_name_product(message: types.Message, state: FSMContext):

    try:
        count_int = int(message.text)

        if count_int > 10000:
            await message.answer('<b>–°–ª–∏—à–∫–æ–º –æ–≥—Ä–æ–º–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞, –º–∞–∫—Å–∏–º—É–º 10 000</b>')
            return
        
        async with state.proxy() as data:
            data['count_product'] = count_int

        await state.set_state(AdvancedAddProducts.link_product)
        await message.answer('<b>–ü—Ä–∏—à–ª–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–æ–≤–∞—Ä –∫–æ—Ç–æ—Ä—ã–π –≤—ã–¥–∞–¥—É—Ç –ø–æ—Å–ª–µ –µ–≥–æ –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏—è</b>', reply_markup=ikb.select_add_or_cancel_product())

    except ValueError:
        await message.answer('<b>–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!</b>')
        return

@dp.message_handler(state=AdvancedAddProducts.link_product)
async def call_add_name_product(message: types.Message, state: FSMContext):

    if len(message.text) >= 600:
        await message.answer('–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è —Å—Å—ã–ª–∫–∞')
        return
    
    if not 'https://' in message.text:
        await message.reply('–ù–µ –≤–∏–¥–Ω–æ —Å—Å—ã–ª–∫–∏ –Ω–∞ —Ç–æ–≤–∞—Ä "https://"')
        return
    
    async with state.proxy() as data:
        _name_product = data['name_product']
        _description_product = data['description_product']
        _price_product = data['price_product']
        _count_product = data['count_product']
        data['link_product'] = message.text

    await state.set_state(AdvancedAddProducts.success)
    await com.delete_all_message_chat(message)
    await message.answer(f'<b>–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:</b> <code>{_name_product}</code>\n'
                         f'<b>–û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:</b> <code>{_description_product}</code>\n'
                         f'<b>–°—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞:</b> <code>{_price_product}</code> <b>RUB</b>\n'
                         f'<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞:</b> <code>{_count_product}</code>\n'
                         f'<b>–°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–æ–≤–∞—Ä:</b> <code>{message.text}</code>\n')
    
    await message.answer('–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–æ–±–∞–≤–ª—è–µ–º—ã–π —Ç–æ–≤–∞—Ä –≤ –∫–∞—Ç–∞–ª–æ–≥, –µ—Å–ª–∏ –≤—Å—ë –≤ –ø–æ—è—Ä–¥–∫–µ –Ω–∞–∂–º–∏—Ç–µ "<b>–î–æ–±–∞–≤–∏—Ç—å</b>" –∏–ª–∏ "<b>–û—Ç–º–µ–Ω–∞</b>" –µ—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–ª–∏', reply_markup=ikb.select_add_or_cancel_product(True))

@dp.callback_query_handler(Text(startswith='add_product_advanced'), state=AdvancedAddProducts)
async def call_add_product_advanced(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        _id_catalog = data['id_catalog']
        _name_product = data['name_product']
        _description_product = data['description_product']
        _price_product = data['price_product']
        _count_product = data['count_product']
        _link_product = data['link_product']

        with DB() as db:
            db.add_product_in_catalogs(_id_catalog, _name_product, _description_product, float(_price_product), float(_count_product), _link_product)

    await state.finish()
    await call.message.edit_text('–¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–∞—Ç–∞–ª–æ–≥ –∏ —É–∂–µ –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º!', reply_markup=aikb.main_admin_panel())
    await com.delete_all_message_chat(call.message)