import aiogram
from aiogram import types
from aiogram.dispatcher.storage import FSMContext
from aiogram.dispatcher.filters import Text

from data.db import DB
from loader import dp, bot
from states.state import Support, ToAskAdmin, NotifyAdmin, ToAskUsers, SetInfoBanUsers
from keyboards import inline_keyboards as ikb
from libs.config import id_admin


@dp.callback_query_handler(Text(startswith='support_'))
async def call_support(call: types.CallbackQuery, state: FSMContext):
    with DB() as db:
        get_ban_list = db.give_is_ban_users(call.message.chat.id)
        if get_ban_list:
            get_info_ban = db.give_ban_info_user(call.message.chat.id)
            await call.message.edit_text(f'<b>–í—ã –±—ã–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã!\n\n–ü—Ä–∏—á–∏–Ω–∞:</b> <i>{get_info_ban[1]}</i>')
            await state.finish()
            return
    
    await state.set_state(Support.id_user)
    
    await call.message.edit_text('<b>–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä—è–º–æ –≤ —ç—Ç–æ—Ç —á–∞—Ç üëá</b>', reply_markup=ikb.cancel_support())


@dp.message_handler(state=Support.id_user)
async def support_handler(message: types.Message, state: FSMContext):
    try:
        await bot.delete_message(message.chat.id, message_id=message.message_id-1)
    except aiogram.utils.exceptions.MessageToDeleteNotFound:
        pass
    
    if len(message.text) > 1000:
        return await message.answer('<b>–û–ø–∏—à–∏—Ç–µ —Å–≤–æ—é –ø—Ä–æ–±–ª–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏–µ–º –±–æ–ª–µ–µ –∫—Ä–∞—Ç–∫–æ–º –∏ –ø–æ–Ω—è—Ç–Ω–æ–º –≤–∏–¥–µ, –Ω–µ –±–æ–ª–µ–µ 1000 —Å–∏–º–≤–æ–ª–æ–≤:</b>', reply_markup=ikb.cancel_support())

    for i in id_admin():
        try:
            await bot.send_message(i,   f'<b>tag_id:</b> <code>#{message.message_id}</code>\n'   
                                        f'<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {message.from_user.full_name}\n'
                                        f'<b>UserName:</b> @{message.from_user.username}\n'
                                        f'<b>ID:</b> <code>{message.from_user.id}</code>\n\n'
                                        f'<b>–°–æ–æ–±—â–µ–Ω–∏–µ:</b> {message.text}'.replace('@None', '–°–∫—Ä—ã—Ç'), reply_markup=ikb.reply_message_in_support(message.chat.id))
        except:
            pass

    await message.answer('<b>–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º</b>', reply_markup=ikb.main_menu_panel_markup())
    await state.finish()


@dp.callback_query_handler(Text(startswith='admin_to_ask_'))
async def call_admin_to_ask_support(call: types.CallbackQuery, state: FSMContext):
    call_msg = call.data.split('_')

    await state.set_state(ToAskAdmin.id_user)

    async with state.proxy() as data:
        data['id_user'] = int(call_msg[3])

    await call.message.answer('–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', reply_markup=ikb.cancel_reply_message_for_users())


@dp.callback_query_handler(Text(startswith='admin_notify_'))
async def call_admin_notify_support(call: types.CallbackQuery, state: FSMContext):
    call_msg = call.data.split('_')
    print(call_msg)
    await state.set_state(NotifyAdmin.id_user)

    async with state.proxy() as data:
        data['id_user'] = int(call_msg[2])

    await call.message.answer(f'–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <u>—á—Ç–æ-–±—ã –µ–≥–æ –ò–∑–≤–µ—Å—Ç–∏—Ç—å</u>', reply_markup=ikb.cancel_reply_message_for_users())


@dp.callback_query_handler(Text(startswith='set_ban_'))
async def call_admin_notify_support(call: types.CallbackQuery, state: FSMContext):
    call_msg = call.data.split('_')
    
    if int(call_msg[2]) not in id_admin():    
        await state.set_state(SetInfoBanUsers.id_user)

        async with state.proxy() as data:
            data['id_user'] = int(call_msg[2])

        return await call.message.answer(f'<b>–ü—Ä–∏—à–ª–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –ë–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID</b> <code>{call_msg[2]}</code>'
                                         '<b>–º–∞–∫—Å–∏–º—É–º 800 —Å–∏–º–≤–æ–ª–æ–≤ –∏–ª–∏ –ø—Ä–∏—à–ª–∏—Ç–µ "-" —á—Ç–æ-–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–∏—á–∏–Ω—ã –ë–∞–Ω–∞ –ü—É—Å—Ç—ã–º</b>', reply_markup=ikb.cancel_reply_message_for_users())
            
    if id_admin()[0] == call.message.chat.id:
        return await call.message.answer('<b>–í–æ–∑–º–æ–∂–Ω–æ —ç—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!</b>\n-–í—ã –º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏ –≤ —Ä–∞–∑–¥–µ–ª–µ –ê–¥–º–∏–Ω–∫–∞->–ê–¥–º–∏–Ω—ã')

    await call.message.answer(f'<b>–í–æ–∑–º–æ–∂–Ω–æ —ç—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!</b>\n-–í—ã –ù–ï –º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏, —Å–æ–æ–±—â–∏—Ç–µ –ì–ª–∞–≤–Ω–æ–º—É –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –ø–æ ID <code>{id_admin()[0]}</code> –≤ –ø–æ–¥–¥–µ—Ä–∂–∫–µ')


@dp.callback_query_handler(Text(startswith='reply_message_user_in_support_close_id_'))
async def call_admin_notify_support(call: types.CallbackQuery):
    call_msg = call.data.split('_')
    
    await call.message.delete()

    try:
        await bot.send_message(int(call_msg[7]), text='<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–∫—Ä—ã–ª –¥–∏–∞–ª–æ–≥ c –≤–∞–º–∏</b>')
    except:
        pass    


@dp.callback_query_handler(Text(startswith='users_to_ask_'))
async def call_admin_to_ask_support(call: types.CallbackQuery, state: FSMContext):
    call_msg = call.data.split('_')
    await state.set_state(ToAskUsers.id_admin)

    async with state.proxy() as data:
        data['id_admin'] = int(call_msg[3])

    await call.message.answer(f'<b>–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ</b>', reply_markup=ikb.cancel_reply_message_for_users())


@dp.callback_query_handler(Text(startswith='users_thank_'))
async def call_admin_notify_support(call: types.CallbackQuery):
    _id_admin = int(call.data.split('_')[2])

    await call.message.edit_text('<b>–°–ø–∞—Å–∏–±–æ!</b>')
    
    message_text = '<b>–í–∞—Å —Ç–æ–ª—å–∫–æ —á—Ç–æ –ü–æ–±–ª–∞–≥–æ–¥–∞—Ä–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞ –í–∞—à—É –û–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å</b>\n\n'
    with DB() as db:
        get_karma_admins = db.—Åharacteristic_bot()

        if get_karma_admins[0][11] != 0:
            old_karama_admin = db.give_karma_admin(_id_admin)

            main_admin = id_admin()
            if _id_admin == main_admin[0]:
                message_text += f'<b>–ì–ª–∞–≤–Ω–æ–º—É –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –Ω–µ –Ω—É–∂–Ω–∞ –∫–∞—Ä–º–∞, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –µ–≥–æ –¥–æ–±–∞–≤–∏—Ç—å —Å–µ–±–µ —Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É @ProgramsCreator</b>'

            if old_karama_admin is not None:
                db.update_karma_admin(_id_admin, get_karma_admins[0][11], old_karama_admin[0])
                message_text += f'<b>–í–∞—à–∞ –∫–∞—Ä–º–∞ —É–≤–µ–ª–∏—á–∏–ª–∞—Å—å –Ω–∞:</b> +{get_karma_admins[0][11]}'
    
    try:
        await bot.send_message(_id_admin, message_text)
    except:
        pass


@dp.message_handler(state=ToAskAdmin.id_user)
async def call_reply_message_user(message: types.Message, state: FSMContext):
    
    async with state.proxy() as data:
        _id_user = data['id_user']

    await reply_message_func(message, _id_user, 'to_ask')
    await state.finish()


@dp.message_handler(state=ToAskUsers.id_admin)
async def call_reply_message_user(message: types.Message, state: FSMContext):
    if len(message.text) > 1000:
        return await message.answer('<b>–û–ø–∏—à–∏—Ç–µ —Å–≤–æ—é –ø—Ä–æ–±–ª–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏–µ–º –±–æ–ª–µ–µ –∫—Ä–∞—Ç–∫–æ–º –∏ –ø–æ–Ω—è—Ç–Ω–æ–º –≤–∏–¥–µ, –Ω–µ –±–æ–ª–µ–µ 1000 —Å–∏–º–≤–æ–ª–æ–≤:</b>', reply_markup=ikb.cancel_support())

    async with state.proxy() as data:
        _id_admin = data['id_admin']

    await reply_message_func(message, _id_admin, 'users_to_ask')
    await state.finish()


@dp.message_handler(state=NotifyAdmin.id_user)
async def call_reply_message_user(message: types.Message, state: FSMContext):
    
    async with state.proxy() as data:
        _id_user = data['id_user']


    await reply_message_func(message, _id_user, 'notify')
    await state.finish()


@dp.message_handler(state=SetInfoBanUsers.id_user)
async def call_reply_message_user(message: types.Message, state: FSMContext):

    if len(message.text) > 800:
        return await message.answer('<b>–ú–∞–∫—Å–∏–º—É–º 800 —Å–∏–º–≤–æ–ª–æ–≤ –≤ –æ–ø–∏—Å–∞–Ω–∏–∏ –ø—Ä–∏—á–∏–Ω—ã –ë–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –ø—Ä–∏—à–ª–∏—Ç–µ "-" —á—Ç–æ-–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–∏—á–∏–Ω—ã –ë–∞–Ω–∞ –ü—É—Å—Ç—ã–º:</b>')

    async with state.proxy() as data:
        _id_user = data['id_user']
    
    msg_user_ban = '<b>–í—ã –±—ã–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π!</b>'
    msg_admin_ban = '<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω üî¥!</b>'
    with DB() as db:
        db.update_ban_list('ban', _id_user, message.text)

        if message.text != '-':    
            msg_user_ban += f'\n\n<b>–ü—Ä–∏—á–∏–Ω–∞ –ë–∞–Ω–∞:</b> <i>{message.text}</i>'
            msg_admin_ban += msg_user_ban

    try:
        await bot.send_message(_id_user, msg_user_ban)
    except:
        pass
    
    await state.finish()
    await message.answer(f'<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω üî¥!</b>\n\n–ü—Ä–∏—á–∏–Ω–∞ –ë–∞–Ω–∞: <i>{message.text}</i>')


async def reply_message_func(message: types.Message, _id, method):
    try:
        if method == 'to_ask':
            await bot.send_message(_id, f'<b>–ê–¥–º–∏–Ω</b>\n{message.text}', reply_markup=ikb.reply_message_user_in_support(message.from_user.id))
        elif method == 'notify':
            await bot.send_message(_id, f'<b>–ê–¥–º–∏–Ω</b>\n{message.text}')
    except:
        return await message.answer(f'<b>–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –¥–æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {_id}</b>')
        
    if method == 'users_to_ask':
        try:
            await bot.send_message(_id, f'<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {message.from_user.full_name}\n'
                                        f'<b>UserName:</b> @{message.from_user.username}\n'
                                        f'<b>ID:</b> <code>{message.from_user.id}</code>\n\n'
                                        f'<b>–°–æ–æ–±—â–µ–Ω–∏–µ:</b> {message.text}'.replace('@None', '–°–∫—Ä—ã—Ç'), reply_markup=ikb.reply_message_in_support(message.chat.id))
        except:
            await message.answer('–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –¥–æ—Å—Ç–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –∫–æ—Ç–æ—Ä—ã–π –¥–µ—Ä–∂–∞–ª —Å –≤–∞–º–∏ —Å–≤—è–∑—å\n–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å —Å–Ω–æ–≤–∞ –≤ —Ä–∞–∑–¥–µ–ª –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –¥–ª—è –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏—è –ø–æ–º–æ—â–∏ –¥—Ä—É–≥–∏—Ö –ê–¥–º–∏–Ω–æ–≤')

    await message.answer('<b>–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ</b>')


